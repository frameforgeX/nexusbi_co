/*======================
    IMPLEMENTATION GUIDE
=====================*/
To implement these styles and scripts in your project:

1. Required Dependencies:
   - Font families: 
     * Montserrat (Google Fonts)
     * Roboto (Google Fonts)
   - Libraries:
     * particles.js (https://vincentgarreau.com/particles.js/)

2. HTML Structure Requirements:
   - Add id="particles-js" to your background container
   - Use class="container" for consistent width containers
   - Use class="reveal-animation" for elements you want to animate
   - Modal structure should follow the pattern in careers.html

3. Implementation Steps:
   1. Add Google Fonts to your HTML:
      <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Roboto:wght@400;500&display=swap" rel="stylesheet">
   2. Include particles.js before your main script:
      <script src="path/to/particles.js"></script>
   3. Copy all CSS into your stylesheet
   4. Copy all JavaScript into your script file
   5. Initialize particles.js using the provided configuration

4. Note: All animations and interactions will work automatically once the code is properly implemented.

/*======================
    FILE ORGANIZATION
=====================*/
This file contains styles and scripts from the following files:
1. css/careers.css - Main careers page styles
2. css/careers-modal.css - Modal specific styles
3. js/script.js - Main JavaScript functionality

/*======================
    base.css (Required Variables)
=====================*/
:root {
    /* These variables are from base.css and are required for the careers page */
    --font-primary: 'Montserrat', sans-serif;
    --font-secondary: 'Roboto', sans-serif;
    
    /* Container max-width */
    --container-max-width: 1200px;
    --container-padding: 1rem;
}

/* Container class used throughout the site */
.container {
    max-width: var(--container-max-width);
    margin: 0 auto;
    padding: 0 var(--container-padding);
}

/*======================
    careers.css
=====================*/

/* Variables needed for careers page */
:root {
  --color-primary: #CEA64E;
  --color-accent: #07B2B2;
  --color-bg: #030F17;
  --color-bg-secondary: rgba(7, 32, 48, 0.4);
  --color-text: #FFFFFF;
  --color-text-light: rgba(255, 255, 255, 0.8);
  --color-text-muted: rgba(255, 255, 255, 0.6);
  --color-border: rgba(255, 255, 255, 0.1);
  --color-card-bg: rgba(7, 32, 48, 0.6);
  
  --space-xs: 0.25rem;
  --space-s: 0.5rem;
  --space-m: 1rem;
  --space-l: 2rem;
  --space-xl: 4rem;
}

/* Careers Hero Section */
.careers-hero {
  position: relative;
  overflow: hidden;
}

/* Careers Introduction */
.careers-intro {
  padding: var(--space-xl) 0;
  position: relative;
  overflow: hidden;
}

.careers-intro .intro-content {
  position: relative;
  z-index: 2;
}

.careers-intro .intro-text {
  max-width: 800px;
  margin: 0 auto;
  text-align: center;
}

/* Stats Container */
.stats-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: var(--space-l);
  margin: var(--space-l) 0;
}

.stat-item {
  text-align: center;
  flex: 1;
  min-width: 150px;
  max-width: 250px;
  padding: var(--space-m);
  border-radius: 10px;
  background: rgba(7, 32, 48, 0.6);
  backdrop-filter: blur(10px);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Career Opportunities Section */
.career-opportunities {
  padding: var(--space-xl) 0;
  background: var(--color-bg-secondary);
}

.opportunities-grid {
  display: flex;
  flex-direction: column;
  gap: var(--space-xl);
  margin-top: var(--space-xl);
}

.opportunity-card {
  display: flex;
  border-radius: 16px;
  overflow: hidden;
  border: 1px solid rgba(255, 255, 255, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  min-height: 400px;
}

/* Job Listings Modal */
.job-listings-modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  z-index: 1000;
  overflow-y: auto;
  backdrop-filter: blur(5px);
}

.job-listings-modal.active {
  display: block;
}

.modal-content {
  position: relative;
  width: 90%;
  max-width: 1200px;
  margin: 40px auto;
  background: var(--color-bg-secondary);
  border-radius: 16px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  overflow: hidden;
}

/* Application Process Section */
.application-process {
  padding: var(--space-xl) 0;
  background-color: rgba(7, 32, 48, 0.4);
}

.process-steps {
  display: flex;
  flex-direction: column;
  gap: var(--space-xl);
  max-width: 800px;
  margin: 0 auto;
}

/* Benefits Section */
.benefits-section {
  padding: var(--space-xl) 0;
  text-align: center;
}

.benefits-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: var(--space-m);
  max-width: 1200px;
  margin: 0 auto;
}

/* Culture Section */
.culture-section {
  padding: var(--space-xl) 0;
  text-align: center;
}

.culture-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: var(--space-l);
  max-width: 1200px;
  margin: 0 auto;
}

/* Contact CTA Section */
.careers-cta-section {
  padding: var(--space-xl) 0;
  position: relative;
  background: linear-gradient(135deg, rgba(206, 166, 78, 0.05) 0%, rgba(7, 178, 178, 0.05) 100%);
}

/* Animations */
.reveal-animation {
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.6s ease, transform 0.6s ease;
}

.reveal-animation.active {
  opacity: 1;
  transform: translateY(0);
}

/* Job Listing Cards Additional Styles */
.job-listing-card {
  background: rgba(7, 32, 48, 0.8);
  border-radius: 10px;
  border: 1px solid var(--color-border);
  overflow: hidden;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  position: relative;
}

.job-listing-header {
  padding: var(--space-m);
  border-bottom: 1px solid var(--color-border);
  display: flex;
  align-items: center;
  gap: var(--space-m);
}

.job-icon {
  width: 50px;
  height: 50px;
  flex-shrink: 0;
  background-color: rgba(206, 166, 78, 0.1);
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--color-primary);
}

.job-category-name {
  font-size: 1.5rem;
  margin-bottom: var(--space-xs);
  color: var(--color-primary);
}

.job-meta {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-s);
  color: var(--color-text-muted);
  font-size: 0.85rem;
}

.job-meta-item {
  display: flex;
  align-items: center;
  gap: 5px;
}

/* Modal Header and Body Styles */
.modal-header {
  padding: var(--space-l);
  border-bottom: 1px solid var(--color-border);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-close {
  background: none;
  border: none;
  color: var(--color-text-light);
  font-size: 2rem;
  cursor: pointer;
  padding: 0.5rem;
  line-height: 1;
  transition: color 0.3s ease;
}

.modal-body {
  padding: var(--space-l);
  max-height: calc(100vh - 200px);
  overflow-y: auto;
}

/* Button Styles */
.btn-primary {
  align-self: flex-start;
  padding: 0.5rem 1.5rem;
  background: var(--color-primary);
  color: var(--color-text-dark);
  border-radius: 6px;
  font-weight: 500;
  font-size: 0.95rem;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  white-space: nowrap;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}

.btn-primary:hover {
  background: var(--color-primary-dark);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(206, 166, 78, 0.2);
}

/* Process Step Styles */
.step-number {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 60px;
  height: 60px;
  background-color: var(--color-primary);
  color: var(--color-bg);
  border-radius: 50%;
  font-size: 1.5rem;
  font-weight: 700;
  margin: 0 auto var(--space-m) auto;
  position: relative;
  z-index: 1;
}

.step-title {
  font-size: 1.2rem;
  margin-bottom: var(--space-s);
  color: var(--color-primary);
}

/* Responsive Styles */
@media (min-width: 768px) {
  .process-steps {
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .culture-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .opportunity-card {
    flex-direction: column;
  }
}

@media (min-width: 992px) {
  .culture-grid {
    grid-template-columns: repeat(3, 1fr);
  }
  
  .benefits-grid {
    grid-template-columns: repeat(4, 1fr);
  }
}

/*======================
    JAVASCRIPT
=====================*/

// Modal Functionality
document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('jobListingsModal');
    const closeBtn = modal.querySelector('.modal-close');
    const jobButtons = document.querySelectorAll('.open-jobs');
    const jobListings = document.querySelectorAll('.job-listing-card');

    // Open modal and filter jobs
    jobButtons.forEach(button => {
        button.addEventListener('click', () => {
            const category = button.dataset.category;
            filterJobs(category);
            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
        });
    });

    // Close modal
    closeBtn.addEventListener('click', () => {
        modal.classList.remove('active');
        document.body.style.overflow = '';
    });

    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.remove('active');
            document.body.style.overflow = '';
        }
    });

    // Filter jobs
    function filterJobs(category) {
        const title = modal.querySelector('.modal-title');
        title.textContent = getCategoryTitle(category);

        jobListings.forEach(job => {
            const jobCategory = getJobCategory(job, category);
            job.style.display = jobCategory ? 'block' : 'none';
            if (jobCategory) {
                job.classList.add('reveal-animation');
                setTimeout(() => {
                    job.classList.add('active');
                }, 100);
            }
        });
    }
});

// Stats Counter Animation
function animateCounter(element) {
    const target = parseInt(element.getAttribute('data-count'));
    const duration = 2000;
    const step = Math.max(1, Math.floor(target / (duration / 30)));
    let current = 0;
    
    const timer = setInterval(() => {
        current += step;
        if (current >= target) {
            element.textContent = target;
            clearInterval(timer);
        } else {
            element.textContent = current;
        }
    }, 30);
}

// Initialize counters when they come into view
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const counterElements = entry.target.querySelectorAll('.stat-number');
            counterElements.forEach(animateCounter);
            observer.unobserve(entry.target);
        }
    });
}, { threshold: 0.1 });

// Job Details Animation
const jobDetailsObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const listItems = entry.target.querySelectorAll('.job-details-list li');
            listItems.forEach((item, index) => {
                setTimeout(() => {
                    item.style.opacity = '1';
                    item.style.transform = 'translateX(0)';
                }, index * 100);
            });
            jobDetailsObserver.unobserve(entry.target);
        }
    });
}, { threshold: 0.1 });

// Helper function to get category title
function getCategoryTitle(category) {
    const titles = {
        'professional': 'Professional Positions',
        'nss': 'NSS Positions',
        'internship': 'Internship Opportunities'
    };
    return titles[category] || 'Available Positions';
}

// Helper function to determine if a job matches the category
function getJobCategory(job, category) {
    switch(category) {
        case 'professional':
            return ['analysis', 'technology', 'consulting', 'operations'].includes(job.dataset.category);
        case 'nss':
            return job.dataset.category === 'nss';
        case 'internship':
            return job.dataset.category === 'internship';
        default:
            return true;
    }
}

// Mouse movement effect for job cards
document.querySelectorAll('.job-listing-card').forEach(card => {
    card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        card.style.setProperty('--x', x + 'px');
        card.style.setProperty('--y', y + 'px');
    });
});

// Reveal Animation Handler
const observeReveal = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('active');
            observeReveal.unobserve(entry.target);
        }
    });
}, {
    threshold: 0.1
});

document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.reveal-animation').forEach(el => {
        observeReveal.observe(el);
    });
});

// Initialize all observers and animations when document is ready
document.addEventListener('DOMContentLoaded', () => {
    // Initialize stats container observer
    const statsContainer = document.querySelector('.stats-container');
    if (statsContainer) {
        observer.observe(statsContainer);
    }

    // Initialize job details observer
    document.querySelectorAll('.job-listing-content').forEach(content => {
        jobDetailsObserver.observe(content);
    });

    // Initialize reveal animations
    document.querySelectorAll('.reveal-animation').forEach(el => {
        observeReveal.observe(el);
    });

    // Initialize hover effects for cards
    document.querySelectorAll('.opportunity-card, .benefit-card, .culture-card').forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-10px)';
        });
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
        });
    });
});

/*======================
    particles.css (Required for background)
=====================*/
#particles-js {
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: 0;
    pointer-events: none;
}

/*======================
    script.js (Main JavaScript)
=====================*/

// Modal Functionality
document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('jobListingsModal');
    const closeBtn = modal.querySelector('.modal-close');
    const jobButtons = document.querySelectorAll('.open-jobs');
    const jobListings = document.querySelectorAll('.job-listing-card');

    // Open modal and filter jobs
    jobButtons.forEach(button => {
        button.addEventListener('click', () => {
            const category = button.dataset.category;
            filterJobs(category);
            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
        });
    });

    // Close modal
    closeBtn.addEventListener('click', () => {
        modal.classList.remove('active');
        document.body.style.overflow = '';
    });

    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.remove('active');
            document.body.style.overflow = '';
        }
    });

    // Filter jobs
    function filterJobs(category) {
        const title = modal.querySelector('.modal-title');
        title.textContent = getCategoryTitle(category);

        jobListings.forEach(job => {
            const jobCategory = getJobCategory(job, category);
            job.style.display = jobCategory ? 'block' : 'none';
            if (jobCategory) {
                job.classList.add('reveal-animation');
                setTimeout(() => {
                    job.classList.add('active');
                }, 100);
            }
        });
    }
});

// Stats Counter Animation
function animateCounter(element) {
    const target = parseInt(element.getAttribute('data-count'));
    const duration = 2000;
    const step = Math.max(1, Math.floor(target / (duration / 30)));
    let current = 0;
    
    const timer = setInterval(() => {
        current += step;
        if (current >= target) {
            element.textContent = target;
            clearInterval(timer);
        } else {
            element.textContent = current;
        }
    }, 30);
}

// Initialize counters when they come into view
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const counterElements = entry.target.querySelectorAll('.stat-number');
            counterElements.forEach(animateCounter);
            observer.unobserve(entry.target);
        }
    });
}, { threshold: 0.1 });

// Job Details Animation
const jobDetailsObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const listItems = entry.target.querySelectorAll('.job-details-list li');
            listItems.forEach((item, index) => {
                setTimeout(() => {
                    item.style.opacity = '1';
                    item.style.transform = 'translateX(0)';
                }, index * 100);
            });
            jobDetailsObserver.unobserve(entry.target);
        }
    });
}, { threshold: 0.1 });

// Helper function to get category title
function getCategoryTitle(category) {
    const titles = {
        'professional': 'Professional Positions',
        'nss': 'NSS Positions',
        'internship': 'Internship Opportunities'
    };
    return titles[category] || 'Available Positions';
}

// Helper function to determine if a job matches the category
function getJobCategory(job, category) {
    switch(category) {
        case 'professional':
            return ['analysis', 'technology', 'consulting', 'operations'].includes(job.dataset.category);
        case 'nss':
            return job.dataset.category === 'nss';
        case 'internship':
            return job.dataset.category === 'internship';
        default:
            return true;
    }
}

// Mouse movement effect for job cards
document.querySelectorAll('.job-listing-card').forEach(card => {
    card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        card.style.setProperty('--x', x + 'px');
        card.style.setProperty('--y', y + 'px');
    });
});

// Reveal Animation Handler
const observeReveal = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('active');
            observeReveal.unobserve(entry.target);
        }
    });
}, {
    threshold: 0.1
});

document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.reveal-animation').forEach(el => {
        observeReveal.observe(el);
    });
});

/*======================
    Additional Required Scripts
=====================*/

// Particles.js configuration (required for background)
particlesJS('particles-js', {
    particles: {
        number: {
            value: 80,
            density: {
                enable: true,
                value_area: 800
            }
        },
        color: {
            value: '#ffffff'
        },
        opacity: {
            value: 0.1
        },
        size: {
            value: 3
        },
        line_linked: {
            enable: true,
            distance: 150,
            color: '#ffffff',
            opacity: 0.1,
            width: 1
        },
        move: {
            enable: true,
            speed: 2
        }
    },
    interactivity: {
        detect_on: 'canvas',
        events: {
            onhover: {
                enable: true,
                mode: 'grab'
            },
            resize: true
        }
    },
    retina_detect: true
});

/*======================
    HTML STRUCTURE EXAMPLES
=====================*/

<!-- Example Career Section Structure -->
<section class="careers-section">
    <div id="particles-js"></div>
    <div class="container">
        <h2 class="reveal-animation">Careers at NexusBI</h2>
        <div class="career-stats">
            <!-- Stats counters -->
            <div class="stat reveal-animation">
                <span class="counter" data-target="95">0</span>
                <p>Success Rate</p>
            </div>
            <!-- Add more stats as needed -->
        </div>
        
        <div class="jobs-container">
            <!-- Job Card Example -->
            <div class="job-card reveal-animation">
                <h3>Job Title</h3>
                <p class="job-description">Brief description here...</p>
                <button class="open-modal" data-job="job-id">Learn More</button>
            </div>
        </div>
    </div>
</section>

<!-- Modal Structure -->
<div class="modal" id="jobModal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <div class="modal-body">
            <h2 id="modalTitle">Job Title</h2>
            <div id="modalDescription"></div>
            <div class="modal-footer">
                <button class="apply-btn">Apply Now</button>
            </div>
        </div>
    </div>
</div>

/*======================
    CSS STYLES
=====================*/